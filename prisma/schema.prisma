generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // Using MongoDB
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String      @unique
  hashedPassword String?
  role           Role        @default(USER)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  apartments     Apartment[] @relation("UserApartments")
  accounts       Account[]   // Relation to NextAuth Accounts
  sessions       Session[]   // Relation to NextAuth Sessions
}

model Apartment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  minPrice     Float
  maxPrice     Float
  rentalType   String
  starRating   Int
  propertyType String
  images       String[]
  phoneNumber  String
  email        String
  address      String
  userId       String    @db.ObjectId
  user         User      @relation("UserApartments", fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Subscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
