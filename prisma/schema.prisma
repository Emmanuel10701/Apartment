generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb" // Using MongoDB
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                   String                  @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String                  @unique
  hashedPassword       String?
  role                 Role                    @default(USER)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  apartments           Apartment[]             @relation("UserApartments") // No fields or references here
  accounts             Account[]               // Relation to NextAuth Accounts
  sessions             Session[]               // Relation to NextAuth Sessions
  verificationTokens    VerificationToken[]     // Relation for password reset tokens
  passwordReset        passwordReset[]         // Relation for password reset tokens
}

model Apartment {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  minPrice             Float
  maxPrice             Float
  rentalType           String
  availableRooms Int
  starRating           Int
  propertyType         String
  kitchenImage         String?   // Separate image for kitchen
  livingRoomImage      String?   // Separate image for living room
  bedroomImage         String?   // Separate image for bedroom
  apartmentImage       String?   // General apartment image
  phoneNumber          String
  email                String    // Link to the user's email
  address              String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Specify fields and references here
  user                 User      @relation("UserApartments", fields: [email], references: [email])
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  email                String   @unique
  createdAt            DateTime @default(now())
}

model Account {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId
  type                 String
  provider             String
  providerAccountId    String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken         String   @unique
  userId               String   @db.ObjectId
  expires              DateTime
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier           String
  token                String
  expires              DateTime
  userId               String   @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model passwordReset {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId
  token                String   @unique
  createdAt            DateTime @default(now())
  expires              DateTime

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
